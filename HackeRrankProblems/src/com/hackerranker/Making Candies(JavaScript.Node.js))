'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the minimumPasses function below.
function minimumPasses(m, w, p, n) {

let pass=0, min = Math.ceil(n/(m*w)), points=0;
while(pass < min) {
    let dPass = Math.ceil((p-points)/(m*w));
    pass+=dPass;
    points+=m*w*dPass;
    if (Math.floor(points/p) >= Math.abs(m-w)) {
        points -= Math.abs(m-w) * p;
        m > w ? w = m : m = w;
        let upgrades = Math.floor(points/p);
        if (upgrades > 0) {
            if (upgrades % 2 === 0) {
                m=w=m+(upgrades/2);
            } else {
                m=w=m+Math.floor(upgrades/2);
                m++;
            }
            points -= upgrades * p;
        }
    } else {
        let upgrades = Math.floor(points/p);
        m > w ? w+=upgrades : m+=upgrades;
        points -= upgrades * p;
    }
    let minPass = Math.ceil((n-points)/(m*w));
    if (min > minPass+pass) min = minPass+pass;
}
return min;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const mwpn = readLine().split(' ');

    const m = parseInt(mwpn[0], 10);

    const w = parseInt(mwpn[1], 10);

    const p = parseInt(mwpn[2], 10);

    const n = parseInt(mwpn[3], 10);

    let result = minimumPasses(m, w, p, n);

    ws.write(result + "\n");

    ws.end();
}
