Whole Minute Dilemma( c language) 3 test cases pass
-----------------------------------------------------
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
int parse_int(char*);

long playlist(int timeSize, int* time) {
    int i, j;
int counter=0;
int timehash[500];
int same_counter=0;
    
for (i=0; i<500; i++) timehash[i]=0;
for (i=0; i<timeSize; i++) timehash[time[i] - 1]++;
for (i=0; i<500; i++)
    for (j=0; j<500; j++)
        if ((i+j+2) % 60 == 0)
            if (i==j) same_counter += timehash[i]*(timehash[i]-1)/2;
              else counter += timehash[i]*timehash[j];
    
return (counter / 2) + same_counter;

}
int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");
    int songs_count = parse_int(ltrim(rtrim(readline())));
    int* songs = malloc(songs_count * sizeof(int));
    for (int i = 0; i < songs_count; i++) {
        int songs_item = parse_int(ltrim(rtrim(readline())));
        *(songs + i) = songs_item;
    }

    long result = playlist(songs_count, songs);
    fprintf(fptr, "%ld\n", result);
    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
